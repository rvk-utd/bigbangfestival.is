<?php

/**
 * Implements hook_node_export_alter().
 */
function node_export_webforms_node_export_alter(&$nodes, $format) {
  // Check if we need to support the Webform Validation module.
  $webform_validation_enabled = module_exists('webform_validation');

  foreach ($nodes as $i => $node) {
    // Remove the "menu" key if it is empty.
    // For some reason it exports in a different order and causes an override status.
    if($node->menu === null) {
      unset($node->menu);
    }

    // Check if the node is a webform.
    if (isset($node->webform)) {

      // There are several elements we want to remove to cut down on diffs when making changes.
      unset($node->created);
      unset($node->changed);
      unset($node->vuuid);
      unset($node->vid);
      unset($node->revision_timestamp);
      unset($node->revision_uid);
      unset($node->num_revisions);
      unset($node->current_revision_id);

      // We need to remove the nid of each component.
      foreach ($node->webform['components'] as &$component) {
        unset($component['nid']);
      }

      $node->webform_export = $node->webform;

      unset($node->webform_export['components']);

      if($webform_validation_enabled) {
        module_load_include('inc', 'webform_validation', 'webform_validation.admin');
        // Get the rules for this node.
        $rules = webform_validation_get_webform_rules($node);
        // Because we will be recreate all rules, remove the ID's.
        $rules = array_values($rules);
        // The order doesn't matter so lets sort by rule weight for consistent results across changes.
        usort($rules, 'node_export_webforms_rule_sort');
        $ordered_rules = array();

        // Cleanup details for each rule that will be recreated during import.
        foreach($rules as &$rule) {
          // Simplify the components reference to just the form_key.
          $component_keys = array();
          foreach($rule['components'] as $c) {
            $component_keys[] = $c['form_key'];
          }
          $rule['components'] = $component_keys;
          unset($rule['ruleid']);
          unset($rule['nid']);
          $rule_key = preg_replace('/[^A-Za-z0-9]/s', '_', $rule['rulename']);
          $ordered_rules[$rule_key] = $rule;
        }
        ksort($ordered_rules);

        $node->webform_validation_rules = $ordered_rules;
      }
    }
  }
}

/**
 * Return sort value when comparing two webform validation rules.
 * @param array $a
 * @param array $b
 * @return int
 */
function node_export_webforms_rule_sort($a, $b) {
  $a_weight = intval($a['weight']);
  $b_weight = intval($b['weight']);
  if($a_weight == $b_weight) {
    return 0;
  }
  else {
    return $a_weight > $b_weight ? 1 : -1;
  }
}

/**
 * Implements hook_node_export_import_alter().
 */
function node_export_webforms_node_export_import_alter(&$nodes, $format, $save) {
  // We need to mode the "webform" property to something custom like "webform_export".
  // If we don't for some reason, the components get screwed up at the end of the import.
  // We'll manually fix that in hook_node_export_after_import_alter().
  foreach ($nodes as $nid => $node) {
    if (isset($nodes[$nid]->webform)) {
      $nodes[$nid]->webform_export = $nodes[$nid]->webform;
      unset($nodes[$nid]->webform);
    }
  }
}

/**
 * Implements hook_node_export_after_import_alter().
 */
function node_export_webforms_node_export_after_import_alter(&$nodes, $format, $save) {
  // Check if we need to support the Webform Validation module.
  $webform_validation_enabled = module_exists('webform_validation');

  foreach ($nodes as $node) {
    // Check if the node is a webform.
    if (isset($node->webform_export)) {
      $existing_node = entity_uuid_load('node', array($node->uuid));
      $node->webform = $node->webform_export;
      $node->webform['record_exists'] = false;
      unset($node->webform_export);

      if (!empty($existing_node)) {
        $existing_node = reset($existing_node);
        // Delete existing webform records, we're about to recreate it.
        db_delete('webform')
          ->condition('nid', $existing_node->nid)
          ->execute();
        db_delete('webform_component')
          ->condition('nid', $existing_node->nid)
          ->execute();
        db_delete('webform_roles')
          ->condition('nid', $existing_node->nid)
          ->execute();
        // Handle
        if($webform_validation_enabled) {
          // Delete existing rules for this node.
          // Get the existing rule IDs so we can check for components to delete as well.
          $rules = webform_validation_get_node_rules($existing_node->nid);
          foreach ($rules as $rid => $rule) {
            // Delete existing rules before we import new ones.
            webform_dynamic_delete_rule($rid);
          }
        }
      }

      // Save the node so the associated webform data is also handled by the webform module's hooks.
      node_save($node);

      if(isset($node->webform_validation_rules)) {
        // Save new rules.
        foreach ($node->webform_validation_rules as $rule) {
          // Need to manually add a few values to the $rule to emulate the admin form.
          // Emulate the "add" form action.
          $rule['action'] = 'add';
          $rule['nid'] = $node->nid;
          unset($rule['ruleid']);
          $components = array();
          foreach($rule['components'] as $form_key) {
            // Check if $form_key is an array for backward compatibility.
            if(is_array($form_key)) {
              $components[$form_key['cid']] = $form_key;
            }
            else {
              // Get the component by name and node id.
              $c = node_export_webforms_get_component($node, $form_key);
              if($c) {
                $components[$c['cid']] = $c;
              }
            }
          }
          $rule['rule_components'] = $components;
          webform_validation_rule_save($rule);
        }
      }
    }
  }
}

/**
 * Gets a component via a form_key from the node's webform.
 *
 * @param object $node
 * @param string $form_key
 * @return null|array
 */
function node_export_webforms_get_component($node, $form_key) {
  foreach($node->webform['components'] as $i => $c) {
    if($c['form_key'] == $form_key) {
      return $c;
    }
  }
  return null;
}

